{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.handleCarouselTap = handleCarouselTap;\nexports.handleCarouselDrag = handleCarouselDrag;\nexports.handleCarouselRelease = handleCarouselRelease;\nexports.handleResizeHeight = handleResizeHeight;\nexports.handleClick = handleClick;\nexports.handleAutoplayPause = handleAutoplayPause;\nexports.handleKeyDown = handleKeyDown;\nexports.handleResize = handleResize;\nexports.handleWheel = handleWheel;\nexports.handleVisibilityChange = handleVisibilityChange;\nexports.signupListener = signupListener;\nexports.removeListener = removeListener;\n\nvar _utils = require(\"./utils\");\n/**\n * Handle Carousel Tap\n * @param {Event} e\n */\n\n\nfunction handleCarouselTap(e) {\n  // Fixes firefox draggable image bug\n  if (e.type === 'mousedown' && e.target.tagName === 'IMG') {\n    e.preventDefault();\n  }\n\n  this.pressed = true;\n  this.dragged = false;\n  this.verticalDragged = false;\n  this.reference = this.xpos(e);\n  this.referenceY = this.ypos(e);\n  this.touchObject = Object.assign(this.touchObject, {\n    startX: this.reference,\n    startY: this.referenceY\n  });\n  this.velocity = 0;\n  this.amplitude = 0;\n  this.frame = this.offset;\n  this.timestamp = Date.now();\n  clearInterval(this.ticker);\n  this.ticker = setInterval(this.track, 100);\n}\n/**\n * Handle Carousel Drag\n * @param {Event} e\n */\n\n\nfunction handleCarouselDrag(e) {\n  if (this.pressed) {\n    var x = this.xpos(e);\n    var y = this.ypos(e);\n    var delta = this.reference - x;\n    var deltaY = Math.abs(this.referenceY - y);\n    var direction = (0, _utils.getSwipeDirection)(Object.assign(this.touchObject, {\n      endX: x,\n      endY: y\n    }));\n    this.scrollType = {\n      type: 'scroll',\n      direction: direction\n    };\n\n    if (deltaY < 30 && !this.verticalDragged) {\n      // If vertical scrolling don't allow dragging.\n      if (delta > 2 || delta < -2) {\n        this.dragged = true;\n        this.reference = x;\n        this.scroll('drag', this.offset + delta);\n      }\n    } else if (this.dragged) {\n      // If dragging don't allow vertical scroll.\n      e.preventDefault();\n      e.stopPropagation();\n    } else {\n      // Vertical scrolling.\n      this.verticalDragged = true;\n    }\n  }\n\n  if (this.dragged) {\n    // If dragging don't allow vertical scroll.\n    e.preventDefault();\n    e.stopPropagation();\n  }\n}\n/**\n   * Handle Carousel Release\n   * @param {Event} e\n   */\n\n\nfunction handleCarouselRelease(e) {\n  if (this.pressed) {\n    this.pressed = false;\n  } else {\n    return;\n  }\n\n  this.beforeChangeTrigger = false;\n  var onSwipe = this.props.onSwipe;\n  onSwipe(this.scrollType.direction);\n  clearInterval(this.ticker);\n  this.target = this.offset;\n\n  if (this.velocity > 10 || this.velocity < -10) {\n    this.amplitude = 0.9 * this.velocity;\n    this.target = this.offset + this.amplitude;\n  }\n\n  this.target = Math.round(this.target / this.dim) * this.dim; // No wrap of items.\n\n  if (this.noWrap) {\n    if (this.target >= this.dim * (this.items.length - 1)) {\n      this.target = this.dim * (this.items.length - 1);\n    } else if (this.target < 0) {\n      this.target = 0;\n    }\n  }\n\n  this.amplitude = this.target - this.offset;\n  this.timestamp = Date.now();\n  requestAnimationFrame(this.autoScroll);\n\n  if (this.dragged) {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n}\n/**\n * Handle window resize will change items Height\n */\n\n\nfunction handleResizeHeight(mutations) {\n  var _this = this;\n\n  var height = this.state.height;\n  var mutation = mutations[mutations.length - 1];\n  var offsetHeight = mutation.target.offsetHeight;\n\n  if (height !== offsetHeight && offsetHeight > 0 && this.isMounted) {\n    this.setState({\n      height: offsetHeight\n    }, function () {\n      _this.resizeHeight = true;\n    });\n  }\n}\n/**\n * Handle carousel click\n */\n\n\nfunction handleClick() {\n  this.disconnectObserver();\n}\n/**\n * Handle autoplay hover to pause\n * @param {Object} options\n * @param {Number} options.autoplaySpeed\n */\n\n\nfunction handleAutoplayPause() {\n  var SliderRef = this.state.SliderRef;\n\n  if (this.autoplayTimer) {\n    clearInterval(this.autoplayTimer);\n    this.autoplayTimer = null;\n    SliderRef.removeEventListener('mouseover', this.handleAutoplayPause);\n    SliderRef.addEventListener('mouseleave', this.autoPlay);\n  }\n}\n\nfunction handleKeyDown(e) {\n  var _this$state$settings = this.state.settings,\n      rtl = _this$state$settings.rtl,\n      accessibility = _this$state$settings.accessibility;\n  var dir = (0, _utils.keyHandler)(e, accessibility, rtl);\n\n  if (dir === 'previous') {\n    this.slickPrev();\n  } else if (dir === 'next') {\n    this.slickNext();\n  }\n}\n/**\n * Handle Throttle Resize\n * @param {Event} e\n */\n\n\nfunction handleResize(e) {\n  this.slideInit();\n  this.connectObserver();\n  var settings = this.state.settings;\n  var onResize = settings.onResize;\n\n  if (settings.fullWidth) {\n    var width = this.state.width;\n    this.dim = width * 2 + settings.gutter;\n    this.offset = this.center * 2 * width;\n    this.target = this.offset;\n  } else {\n    this.scroll('resize');\n  }\n\n  onResize(e);\n}\n\nfunction handleWheel(e) {\n  e.stopPropagation();\n  e.preventDefault();\n  this.beforeChangeTrigger = false;\n  var _this$state = this.state,\n      wheelScroll = _this$state.settings.wheelScroll,\n      activeIndex = _this$state.activeIndex;\n  var deltaY = e.deltaY;\n\n  if (deltaY > 0) {\n    this.scrollType = {\n      type: 'wheel',\n      direction: 'next'\n    };\n    this.slickNext(activeIndex + wheelScroll);\n  } else if (deltaY < 0) {\n    this.scrollType = {\n      type: 'wheel',\n      direction: 'prev'\n    };\n    this.slickPrev(activeIndex - wheelScroll);\n  }\n}\n\nfunction handleVisibilityChange() {\n  this.changeWindow = typeof document !== 'undefined' && document.visibilityState === 'visible';\n}\n\nfunction signupListener() {\n  var _this$state2 = this.state,\n      settings = _this$state2.settings,\n      SliderRef = _this$state2.SliderRef;\n  var swipe = settings.swipe,\n      accessibility = settings.accessibility,\n      wheel = settings.wheel;\n\n  if (swipe) {\n    SliderRef.addEventListener('touchstart', this.handleCarouselTap);\n    SliderRef.addEventListener('touchmove', this.handleCarouselDrag);\n    SliderRef.addEventListener('touchend', this.handleCarouselRelease);\n  } else {\n    SliderRef.removeEventListener('touchstart', this.handleCarouselTap);\n    SliderRef.removeEventListener('touchmove', this.handleCarouselDrag);\n    SliderRef.removeEventListener('touchend', this.handleCarouselRelease);\n  }\n\n  if (accessibility) {\n    SliderRef.addEventListener('keydown', this.handleKeyDown);\n  } else {\n    SliderRef.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  if (wheel) {\n    SliderRef.addEventListener('wheel', this.handleWheel);\n  } else {\n    SliderRef.removeEventListener('wheel', this.handleWheel);\n  }\n\n  SliderRef.addEventListener('mousedown', this.handleCarouselTap);\n  SliderRef.addEventListener('mousemove', this.handleCarouselDrag);\n  SliderRef.addEventListener('mouseup', this.handleCarouselRelease);\n  SliderRef.addEventListener('mouseleave', this.handleCarouselRelease);\n}\n\nfunction removeListener() {\n  var _this$state3 = this.state,\n      settings = _this$state3.settings,\n      SliderRef = _this$state3.SliderRef;\n  var swipe = settings.swipe,\n      accessibility = settings.accessibility,\n      wheel = settings.wheel,\n      autoplay = settings.autoplay;\n\n  if (swipe) {\n    SliderRef.removeEventListener('touchstart', this.handleCarouselTap);\n    SliderRef.removeEventListener('touchmove', this.handleCarouselDrag);\n    SliderRef.removeEventListener('touchend', this.handleCarouselRelease);\n  }\n\n  if (accessibility) {\n    SliderRef.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  if (wheel) {\n    SliderRef.removeEventListener('wheel', this.handleWheel);\n  }\n\n  if (autoplay) {\n    window.removeEventListener('visibilitychange', this.handleVisibilityChange);\n  }\n\n  SliderRef.removeEventListener('mousedown', this.handleCarouselTap);\n  SliderRef.removeEventListener('mousemove', this.handleCarouselDrag);\n  SliderRef.removeEventListener('mouseup', this.handleCarouselRelease);\n  SliderRef.removeEventListener('mouseleave', this.handleCarouselRelease);\n}","map":null,"metadata":{},"sourceType":"script"}