{"ast":null,"code":"function writeUTFBytes(dataview, offset, string) {\n  for (var i = 0; i < string.length; i++) {\n    dataview.setUint8(offset + i, string.charCodeAt(i));\n  }\n}\n\nfunction mergeBuffers(buffer, length) {\n  var result = new Float64Array(length);\n  var offset = 0;\n\n  for (var i = 0; i < buffer.length; i++) {\n    var inner = buffer[i];\n    result.set(inner, offset);\n    offset += inner.length;\n  }\n\n  return result;\n}\n\nfunction interleave(left, right) {\n  var length = left.length + right.length;\n  var result = new Float64Array(length);\n  var inputIndex = 0;\n\n  for (var i = 0; i < length;) {\n    result[i++] = left[inputIndex];\n    result[i++] = right[inputIndex];\n    inputIndex++;\n  }\n\n  return result;\n}\n\nexport default function encodeWAV(buffers, bufferLength, sampleRate, volume) {\n  if (volume === void 0) {\n    volume = 1;\n  }\n\n  var left = mergeBuffers(buffers[0], bufferLength);\n  var right = mergeBuffers(buffers[1], bufferLength);\n  var interleaved = interleave(left, right);\n  var buffer = new ArrayBuffer(44 + interleaved.length * 2);\n  var view = new DataView(buffer);\n  writeUTFBytes(view, 0, 'RIFF');\n  view.setUint32(4, 44 + interleaved.length * 2, true);\n  writeUTFBytes(view, 8, 'WAVE');\n  writeUTFBytes(view, 12, 'fmt ');\n  view.setUint32(16, 16, true);\n  view.setUint16(20, 1, true);\n  view.setUint16(22, 2, true);\n  view.setUint32(24, sampleRate, true);\n  view.setUint32(28, sampleRate * 4, true);\n  view.setUint16(32, 4, true);\n  view.setUint16(34, 16, true);\n  writeUTFBytes(view, 36, 'data');\n  view.setUint32(40, interleaved.length * 2, true);\n  interleaved.forEach(function (sample, index) {\n    view.setInt16(44 + index * 2, sample * (0x7fff * volume), true);\n  });\n  return new Blob([view], {\n    type: 'audio/wav'\n  });\n}","map":{"version":3,"sources":["/Users/raunaqbahl/Documents/Uni/Sem 2, 2020/ENGG4802 (Thesis)/men-s-shed-thesis/mens-shed/node_modules/react-audio-recorder/dist/waveEncoder.js"],"names":["writeUTFBytes","dataview","offset","string","i","length","setUint8","charCodeAt","mergeBuffers","buffer","result","Float64Array","inner","set","interleave","left","right","inputIndex","encodeWAV","buffers","bufferLength","sampleRate","volume","interleaved","ArrayBuffer","view","DataView","setUint32","setUint16","forEach","sample","index","setInt16","Blob","type"],"mappings":"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","sourcesContent":["function writeUTFBytes(dataview, offset, string) {\r\n    for (var i = 0; i < string.length; i++) {\r\n        dataview.setUint8(offset + i, string.charCodeAt(i));\r\n    }\r\n}\r\nfunction mergeBuffers(buffer, length) {\r\n    var result = new Float64Array(length);\r\n    var offset = 0;\r\n    for (var i = 0; i < buffer.length; i++) {\r\n        var inner = buffer[i];\r\n        result.set(inner, offset);\r\n        offset += inner.length;\r\n    }\r\n    return result;\r\n}\r\nfunction interleave(left, right) {\r\n    var length = left.length + right.length;\r\n    var result = new Float64Array(length);\r\n    var inputIndex = 0;\r\n    for (var i = 0; i < length;) {\r\n        result[i++] = left[inputIndex];\r\n        result[i++] = right[inputIndex];\r\n        inputIndex++;\r\n    }\r\n    return result;\r\n}\r\nexport default function encodeWAV(buffers, bufferLength, sampleRate, volume) {\r\n    if (volume === void 0) { volume = 1; }\r\n    var left = mergeBuffers(buffers[0], bufferLength);\r\n    var right = mergeBuffers(buffers[1], bufferLength);\r\n    var interleaved = interleave(left, right);\r\n    var buffer = new ArrayBuffer(44 + interleaved.length * 2);\r\n    var view = new DataView(buffer);\r\n    writeUTFBytes(view, 0, 'RIFF');\r\n    view.setUint32(4, 44 + interleaved.length * 2, true);\r\n    writeUTFBytes(view, 8, 'WAVE');\r\n    writeUTFBytes(view, 12, 'fmt ');\r\n    view.setUint32(16, 16, true);\r\n    view.setUint16(20, 1, true);\r\n    view.setUint16(22, 2, true);\r\n    view.setUint32(24, sampleRate, true);\r\n    view.setUint32(28, sampleRate * 4, true);\r\n    view.setUint16(32, 4, true);\r\n    view.setUint16(34, 16, true);\r\n    writeUTFBytes(view, 36, 'data');\r\n    view.setUint32(40, interleaved.length * 2, true);\r\n    interleaved.forEach(function (sample, index) {\r\n        view.setInt16(44 + (index * 2), sample * (0x7fff * volume), true);\r\n    });\r\n    return new Blob([view], { type: 'audio/wav' });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}