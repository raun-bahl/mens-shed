{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _throttle = _interopRequireDefault(require(\"lodash/throttle\"));\n\nvar _each = _interopRequireDefault(require(\"lodash/each\"));\n\nvar _get = _interopRequireDefault(require(\"lodash/get\"));\n\nvar _isEqual = _interopRequireDefault(require(\"lodash/isEqual\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _resizeObserverPolyfill = _interopRequireDefault(require(\"resize-observer-polyfill\"));\n\nvar _array = _interopRequireDefault(require(\"./array\"));\n\nvar _types = require(\"./types\");\n\nvar _arrows = require(\"./arrows\");\n\nvar _dots = _interopRequireDefault(require(\"./dots\"));\n\nvar _listener = require(\"./listener\");\n\nrequire(\"./style.css\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar extractObject = function extractObject(spec, keys) {\n  var newObject = {};\n\n  for (var i = 0; i < keys.length; i += 1) {\n    var key = keys[i];\n    newObject[key] = spec[key];\n  }\n\n  return newObject;\n};\n\nvar Slider = /*#__PURE__*/function (_Component) {\n  _inherits(Slider, _Component);\n\n  function Slider(props) {\n    var _this;\n\n    _classCallCheck(this, Slider);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Slider).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"isMounted\", true);\n\n    _defineProperty(_assertThisInitialized(_this), \"init\", function () {\n      var _this$state = _this.state,\n          settings = _this$state.settings,\n          width = _this$state.width;\n      var activeIndex = _this.state.activeIndex;\n      settings = _objectSpread({}, _types.defaultProps, {}, _this.props); // force showing one slide and scrolling by one if the fade mode is on\n\n      if (settings.fade) {\n        if (settings.slidesToShow > 1 && process.env.NODE_ENV !== 'production') {\n          console.warn(\"slidesToShow should be equal to 1 when fade is true, you're using \".concat(settings.slidesToShow));\n        }\n\n        settings.slidesToShow = 1;\n      }\n\n      var children = _this.props.children;\n      children = _react[\"default\"].Children.toArray(children).filter(function (child) {\n        return typeof child === 'string' ? !!child.trim() : !!child;\n      });\n\n      var newWith = _this.widthInit();\n\n      if (width !== newWith) {\n        width = newWith;\n      }\n\n      var newChildren = [];\n\n      for (var i = 0; i < children.length; i += settings.rows * settings.slidesPerRow) {\n        var newSlide = [];\n\n        for (var j = i; j < i + settings.rows * settings.slidesPerRow; j += settings.slidesPerRow) {\n          var row = [];\n\n          for (var k = j; k < j + settings.slidesPerRow; k += 1) {\n            if (k < children.length) {\n              row.push(_react[\"default\"].cloneElement(children[k], {\n                key: 100 * i + 10 * j + k,\n                tabIndex: -1,\n                style: {\n                  width: \"\".concat(100 / settings.slidesPerRow, \"%\"),\n                  display: 'inline-block'\n                }\n              }));\n            }\n          }\n\n          newSlide.push(_react[\"default\"].createElement(\"div\", {\n            className: \"carousel-row\",\n            key: 10 * i + j\n          }, row));\n        }\n\n        newChildren.push(_react[\"default\"].createElement(\"div\", {\n          \"data-carouselkey\": i,\n          key: i,\n          className: \"carousel-item\",\n          style: {\n            width: \"\".concat(width, \"px\"),\n            display: 'none'\n          }\n        }, newSlide));\n      }\n\n      if (_this.newChildren.length !== newChildren.length) {\n        _this.rerender = true;\n        _this.newChildren = newChildren;\n      } else {\n        _this.rerender = false;\n        _this.newChildren = newChildren;\n        _this.virtualList = newChildren;\n      }\n\n      if (settings.virtualList && _this.items && _this.items.length === _this.newChildren.length && !_this.rerender) {\n        if (_this.endIndex === activeIndex) {\n          _this.endIndex = null;\n        }\n\n        _this.virtualList = _this.createVirtualList();\n\n        _this.forceUpdate(function () {\n          if (!_this.resizeHeight) {\n            _this.connectObserver();\n          }\n        });\n      }\n\n      if (!(0, _isEqual[\"default\"])((0, _get[\"default\"])(_this.state, 'settings'), settings) && _this.isMounted) {\n        _this.setState({\n          settings: settings\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setRef\", function (element) {\n      return _this.setState({\n        SliderRef: element\n      }, function () {\n        var slides = element.querySelectorAll('.carousel-item');\n        var virtualList = _this.state.settings.virtualList;\n\n        if (virtualList) {\n          _this.virtualList = _this.newChildren;\n\n          _this.forceUpdate(function () {\n            _this.items = new _array[\"default\"](element.querySelectorAll('.carousel-item'));\n            _this.virtualItem = null;\n          });\n        } else {\n          _this.items = new _array[\"default\"](slides);\n        }\n\n        _this.slideInit();\n\n        var settings = _this.state.settings;\n        var slidesToShow = settings.slidesToShow;\n\n        if (slidesToShow < slides.length) {\n          _this.signupListener();\n\n          _this.autoPlay();\n        } else {\n          _this.removeListener();\n        }\n\n        element.addEventListener('click', _this.handleClick);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"autoPlay\", function () {\n      var _this$state2 = _this.state,\n          SliderRef = _this$state2.SliderRef,\n          _this$state2$settings = _this$state2.settings,\n          autoplay = _this$state2$settings.autoplay,\n          autoplaySpeed = _this$state2$settings.autoplaySpeed,\n          pauseOnHover = _this$state2$settings.pauseOnHover;\n\n      if (autoplay && autoplaySpeed > 0 && !_this.autoplayTimer) {\n        _this.scrollType = {\n          type: 'autoplay'\n        };\n        _this.autoplayTimer = setInterval(function () {\n          var autoplayScroll = _this.props.autoplayScroll;\n          var activeIndex = _this.state.activeIndex;\n          _this.beforeChangeTrigger = false;\n\n          _this.slickNext(activeIndex + autoplayScroll);\n        }, autoplaySpeed);\n        window.addEventListener('visibilitychange', _this.handleVisibilityChange);\n\n        if (pauseOnHover) {\n          SliderRef.addEventListener('mouseover', _this.handleAutoplayPause);\n          SliderRef.removeEventListener('mouseleave', _this.autoPlay);\n        } else {\n          SliderRef.removeEventListener('mouseover', _this.handleAutoplayPause);\n          SliderRef.removeEventListener('mouseleave', _this.autoPlay);\n        }\n      } else if (autoplay && autoplaySpeed && _this.autoplayTimer) {\n        _this.autoPlayInit();\n\n        if (!pauseOnHover) {\n          SliderRef.removeEventListener('mouseover', _this.handleAutoplayPause);\n          SliderRef.removeEventListener('mouseleave', _this.autoPlay);\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"autoPlayInit\", function () {\n      var settings = _this.state.settings;\n\n      if (settings.autoplay) {\n        _this.handleAutoplayPause();\n\n        _this.autoPlay();\n      } else if (_this.isMounted) {\n        _this.setState({\n          settings: _objectSpread({}, settings, {\n            autoplay: true\n          })\n        }, function () {\n          _this.handleAutoplayPause();\n\n          _this.autoPlay();\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"connectObserver\", function () {\n      if (!_this.resizeObserver) {\n        var SliderRef = _this.state.SliderRef;\n        _this.resizeObserver = new _resizeObserverPolyfill[\"default\"](_this.handleResizeHeight);\n\n        _this.resizeObserver.observe(SliderRef.querySelector('.carousel-item'));\n      } else {\n        _this.disconnectObserver();\n\n        _this.connectObserver();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"disconnectObserver\", function () {\n      if (_this.resizeObserver) {\n        _this.resizeObserver.disconnect();\n\n        _this.resizeObserver = null;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"track\", function () {\n      var now = Date.now();\n      var elapsed = now - _this.timestamp;\n      _this.timestamp = now;\n      var delta = _this.offset - _this.frame;\n      _this.frame = _this.offset;\n      var v = 1000 * delta / (1 + elapsed);\n      _this.velocity = 0.8 * v + 0.2 * _this.velocity;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"autoScroll\", function (type) {\n      var settings = _this.state.settings;\n\n      if (_this.amplitude) {\n        var elapsed = Date.now() - _this.timestamp;\n\n        var delta = _this.amplitude * Math.exp(-elapsed / settings.duration);\n\n        if (_this.doubleTrigger) {\n          _this.beforeChangeTrigger = false;\n\n          _this.scroll('auto', _this.target - delta);\n\n          requestAnimationFrame(_this.autoScroll);\n          _this.doubleTrigger = false;\n        } else if (delta > 2 || delta < -2) {\n          _this.scroll(type === 'start' ? type : 'auto', _this.target - delta);\n\n          requestAnimationFrame(_this.autoScroll);\n        } else if (_this.changeWindow) {\n          _this.changeWindow = false;\n\n          _this.scroll('auto', _this.target);\n        } else {\n          _this.scroll('end', _this.target);\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getItem\", function (scrollItem, index) {\n      var virtualList = _this.state.settings.virtualList;\n      var el;\n\n      if (virtualList) {\n        var keyIndex = scrollItem.getKeyIndex(index);\n\n        if (keyIndex >= 0) {\n          el = scrollItem.get(keyIndex);\n        }\n      } else {\n        el = scrollItem.get(index);\n      }\n\n      return el;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"scroll\", function (type, x) {\n      var _this$state3 = _this.state,\n          SliderRef = _this$state3.SliderRef,\n          width = _this$state3.width,\n          settings = _this$state3.settings,\n          activeIndex = _this$state3.activeIndex;\n      var centerMode = settings.centerMode,\n          beforeChange = settings.beforeChange,\n          afterChange = settings.afterChange,\n          slidesToShow = settings.slidesToShow,\n          virtualList = settings.virtualList; // Start actual scroll\n\n      var i;\n      var el;\n      var alignment = 'translateX(0px)';\n\n      if (!x) {\n        _this.offset = width * activeIndex * 2;\n      } else {\n        _this.offset = typeof x === 'number' ? x : _this.offset;\n      }\n\n      _this.center = Math.floor((_this.offset + _this.dim / 2) / _this.dim);\n      var delta = _this.offset - _this.center * _this.dim;\n      var dir = delta < 0 ? 1 : -1;\n      var tween = -dir * delta * 2 / _this.dim;\n\n      if (centerMode) {\n        if (slidesToShow % 2 === 0) {\n          alignment = \"translateX(\".concat(width * (slidesToShow / 2), \"px)\");\n        } else {\n          alignment = \"translateX(\".concat((SliderRef.clientWidth - width) / 2 - settings.centerPadding, \"px)\");\n        }\n      } else {\n        alignment = 'translateX(0px)';\n      }\n\n      var _this$scrollType = _this.scrollType,\n          scrollType = _this$scrollType.type,\n          direction = _this$scrollType.direction; // Track scrolling state\n\n      if (!SliderRef.classList.contains('scrolling') && scrollType !== 'arrows' && type !== 'init' && type !== 'resize') {\n        _this.swiping = true;\n        SliderRef.classList.add('scrolling');\n      } // center\n      // Don't show wrapped items.\n\n\n      var index = _this.wrap(_this.center);\n\n      if (!_this.beforeChangeTrigger && type !== 'start' && type !== 'end' && type !== 'init') {\n        _this.beforeChangeTrigger = true;\n        var newIndex;\n\n        switch (scrollType) {\n          case 'arrows':\n            {\n              var slides = settings.arrowsScroll;\n              _this.scrollDistance = slides;\n              newIndex = _this.items.getIndex(direction === 'prev' ? activeIndex - slides : activeIndex + slides);\n              break;\n            }\n\n          case 'dots':\n            {\n              newIndex = _this.scrollOptions.index * _this.scrollOptions.dotsScroll;\n              break;\n            }\n\n          case 'autoplay':\n            {\n              var _slides = settings.autoplayScroll;\n              _this.scrollDistance = _slides;\n              newIndex = _this.items.getIndex(activeIndex + _slides);\n              break;\n            }\n\n          case 'wheel':\n            {\n              var _slides2 = settings.wheelScroll;\n              _this.scrollDistance = _slides2;\n              newIndex = _this.items.getIndex(direction === 'prev' ? activeIndex - _slides2 : activeIndex + _slides2);\n              break;\n            }\n\n          default:\n            break;\n        }\n\n        _this.endIndex = newIndex;\n\n        if (beforeChange && typeof beforeChange === 'function') {\n          beforeChange(activeIndex, newIndex);\n        }\n      }\n\n      if (type !== 'end' && _this.scrollEnd) _this.scrollEnd = false;\n\n      if (type === 'end') {\n        if (afterChange && typeof afterChange === 'function' && !_this.scrollEnd) {\n          afterChange(_this.wrap(_this.center));\n        }\n\n        _this.scrollEnd = true;\n        SliderRef.classList.remove('scrolling');\n        _this.beforeChangeTrigger = false;\n        _this.swiping = false;\n      } else if (_this.scrollEnd) {\n        _this.scrollEnd(true);\n      }\n\n      _this.virtualItem = _this.virtualItem || new _array[\"default\"](SliderRef.querySelectorAll('.carousel-item'), _this.items);\n      var scrollItem = virtualList ? _this.virtualItem : _this.items;\n\n      if (scrollItem.length <= slidesToShow) {\n        el = _this.getItem(scrollItem, 0);\n\n        if (el) {\n          // Add active class to center item.\n          if (el.classList.contains('active')) {\n            (0, _each[\"default\"])(SliderRef.querySelectorAll('.carousel-item'), function (ele) {\n              return ele.classList.remove('active');\n            });\n            el.classList.add('active');\n          }\n\n          var transformString = \"\".concat(alignment, \" translateX(0px)\");\n\n          _this.updateItemStyle(el, transformString);\n        }\n      } else if (!_this.noWrap || _this.center >= 0 && _this.center < scrollItem.length) {\n        el = _this.getItem(scrollItem, index);\n\n        if (el) {\n          // Add active class to center item.\n          if (el.classList.contains('active')) {\n            (0, _each[\"default\"])(SliderRef.querySelectorAll('.carousel-item'), function (ele) {\n              return ele.classList.remove('active');\n            });\n            el.classList.add('active');\n          }\n\n          var _transformString = \"\".concat(alignment, \" translateX(\").concat(-delta / 2, \"px) translateX(\").concat(dir * settings.shift * tween * i, \"px)\");\n\n          _this.updateItemStyle(el, _transformString);\n        }\n      }\n\n      if (centerMode) {\n        var half = Math.floor(scrollItem.length / 2);\n\n        for (i = 1; i <= half; i += 1) {\n          // right side\n          // Don't show wrapped items.\n          if (!_this.noWrap || _this.center + i < scrollItem.length) {\n            el = _this.getItem(scrollItem, _this.wrap(_this.center + i));\n\n            if (el) {\n              var _transformString2 = \"\".concat(alignment, \" translateX(\").concat(settings.shift + (_this.dim * i - delta) / 2, \"px)\");\n\n              _this.updateItemStyle(el, _transformString2);\n            }\n          } // left side\n          // Don't show wrapped items.\n\n\n          if (!_this.noWrap || _this.center - i >= 0) {\n            el = _this.getItem(scrollItem, _this.wrap(_this.center - i));\n\n            if (el) {\n              var _transformString3 = \"\".concat(alignment, \" translateX(\").concat(-settings.shift + (-_this.dim * i - delta) / 2, \"px)\");\n\n              _this.updateItemStyle(el, _transformString3);\n            }\n          }\n        }\n      } else if (scrollItem.length <= slidesToShow) {\n        for (i = 1; i < scrollItem.length; i += 1) {\n          el = _this.getItem(scrollItem, i);\n\n          if (el) {\n            var _transformString4 = \"\".concat(alignment, \" translateX(\").concat(settings.shift + (_this.dim * i - delta) / 2, \"px)\");\n\n            _this.updateItemStyle(el, _transformString4);\n          }\n        }\n      } else {\n        for (i = 1; i < slidesToShow; i += 1) {\n          el = _this.getItem(scrollItem, _this.wrap(_this.center + i));\n\n          if (el) {\n            var _transformString5 = \"\".concat(alignment, \" translateX(\").concat(settings.shift + (_this.dim * i - delta) / 2, \"px)\");\n\n            _this.updateItemStyle(el, _transformString5);\n          }\n        }\n\n        var _half = Math.ceil((scrollItem.length - slidesToShow) / 2);\n\n        for (i = 0; i < _half; i += 1) {\n          // right side\n          if (!_this.noWrap || _this.center + slidesToShow + i < scrollItem.length) {\n            el = _this.getItem(scrollItem, _this.wrap(_this.center + slidesToShow + i));\n\n            if (el) {\n              var _transformString6 = \"\".concat(alignment, \" translateX(\").concat(settings.shift + (_this.dim * (slidesToShow + i) - delta) / 2, \"px)\");\n\n              _this.updateItemStyle(el, _transformString6);\n            }\n          } // left side\n\n\n          if (!_this.noWrap || _this.center + slidesToShow + i < scrollItem.length) {\n            el = _this.getItem(scrollItem, _this.wrap(_this.center - i - 1));\n\n            if (el) {\n              var _transformString7 = \"\".concat(alignment, \" translateX(\").concat(-settings.shift + (-_this.dim * (i + 1) - delta) / 2, \"px)\");\n\n              _this.updateItemStyle(el, _transformString7);\n            }\n          }\n        }\n      } // center\n      // Don't show wrapped items.\n\n\n      if ((!_this.noWrap || _this.center < _this.items.length) && slidesToShow < scrollItem.length) {\n        el = _this.getItem(scrollItem, _this.center);\n\n        if (el) {\n          if (!el.classList.contains('active')) {\n            (0, _each[\"default\"])(SliderRef.querySelectorAll('.carousel-item'), function (ele) {\n              return ele.classList.remove('active');\n            });\n            el.classList.add('active');\n\n            var newActiveIndex = _this.wrap(_this.center);\n\n            if (_this.beforeChangeTrigger && _this.isMounted) {\n              _this.setState({\n                activeIndex: newActiveIndex\n              }, function () {\n                _this.virtualItem = null;\n              });\n            }\n          }\n\n          var _transformString8 = \"\".concat(alignment, \" translateX(\").concat(-delta / 2, \"px) translateX(\").concat(dir * settings.shift * tween, \"px)\");\n\n          _this.updateItemStyle(el, _transformString8);\n        }\n      }\n\n      _this.adaptHeight(); // onCycleTo callback\n\n\n      var currItem = SliderRef.querySelectorAll('.carousel-item')[_this.wrap(_this.center)]; // One time callback\n\n\n      if (typeof _this.oneTimeCallback === 'function') {\n        _this.oneTimeCallback.call(_assertThisInitialized(_this), currItem, _this.dragged);\n\n        _this.oneTimeCallback = null;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateItemStyle\", function (el, transform) {\n      var newEl = el;\n      newEl.style[_this.xform] = transform;\n      newEl.style.zIndex = 1;\n      newEl.style.display = '';\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"widthInit\", function () {\n      var _this$state4 = _this.state,\n          settings = _this$state4.settings,\n          SliderRef = _this$state4.SliderRef;\n      var centerMode = settings.centerMode,\n          centerPadding = settings.centerPadding,\n          slidesToShow = settings.slidesToShow;\n\n      if (SliderRef) {\n        var padding = 0;\n\n        if (typeof centerPadding === 'string') {\n          var _centerPadding$match = centerPadding.match(/\\d+/g);\n\n          var _centerPadding$match2 = _slicedToArray(_centerPadding$match, 1);\n\n          padding = _centerPadding$match2[0];\n        } else if (typeof centerPadding === 'number') {\n          padding = centerPadding;\n        } else {\n          padding = 50;\n          console.warn('centerPadding have to be number or string like 50px');\n        }\n\n        var offsetWidth = SliderRef.offsetWidth;\n\n        if (offsetWidth <= 0) {\n          offsetWidth = window.innerWidth;\n        }\n\n        var sliderWidth = centerMode ? offsetWidth - padding * 2 : offsetWidth;\n        var width = sliderWidth / slidesToShow;\n        return width;\n      }\n\n      return 0;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"slideInit\", function () {\n      var _this$state5 = _this.state,\n          SliderRef = _this$state5.SliderRef,\n          initialSlide = _this$state5.settings.initialSlide;\n\n      if (SliderRef && _this.isMounted) {\n        var width = _this.widthInit();\n\n        _this.setState({\n          width: width\n        }, function () {\n          _this.dim = width * 2; // this.settings.gutter = padding;\n\n          _this.scroll('init');\n\n          if (initialSlide) {\n            if (typeof initialSlide === 'number') {\n              if (initialSlide > 0 && !_this.initialSet) {\n                _this.slickSet(initialSlide);\n\n                _this.initialSet = true;\n              }\n            } else {\n              _this.slickSet(0);\n\n              _this.initialSet = false;\n              console.warn('initialSlide must be a number');\n            }\n          }\n\n          _this.connectObserver();\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"adaptHeight\", function () {\n      var _this$state6 = _this.state,\n          settings = _this$state6.settings,\n          SliderRef = _this$state6.SliderRef,\n          height = _this$state6.height;\n\n      if (settings.adaptiveHeight && SliderRef) {\n        var index = _this.wrap(_this.center);\n\n        var elem = _this.items.get(index);\n\n        var offsetHeight = elem.offsetHeight;\n\n        if (height !== offsetHeight && offsetHeight > 0 && _this.isMounted) {\n          _this.setState({\n            height: offsetHeight\n          });\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"xpos\", function (e) {\n      // touch event\n      if (e.targetTouches && e.targetTouches.length >= 1) {\n        return e.targetTouches[0].clientX;\n      } // mouse event\n\n\n      return e.clientX;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"ypos\", function (e) {\n      // touch event\n      if (e.targetTouches && e.targetTouches.length >= 1) {\n        return e.targetTouches[0].clientY;\n      } // mouse event\n\n\n      return e.clientY;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"wrap\", function (x) {\n      return _this.items.getIndex(x);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"cycleTo\", function (n, callback) {\n      var diff = _this.center % _this.items.length - n; // Account for wraparound.\n\n      if (!_this.noWrap) {\n        if (diff < 0) {\n          if (Math.abs(diff + _this.items.length) < Math.abs(diff)) {\n            diff += _this.items.length;\n          }\n        } else if (diff > 0) {\n          if (Math.abs(diff - _this.items.length) < diff) {\n            diff -= _this.items.length;\n          }\n        }\n      }\n\n      _this.target = _this.dim * Math.round(_this.offset / _this.dim); // Next\n\n      if (diff < 0) {\n        _this.target += _this.dim * Math.abs(diff); // Prev\n      } else if (diff > 0) {\n        _this.target -= _this.dim * diff;\n      } // Set one time callback\n\n\n      if (typeof callback === 'function') {\n        _this.oneTimeCallback = callback;\n      } // Scroll\n\n\n      if (_this.offset !== _this.target) {\n        _this.amplitude = _this.target - _this.offset;\n        _this.timestamp = Date.now();\n        requestAnimationFrame(function () {\n          _this.autoScroll('start');\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"slickNext\", function (n) {\n      if (_this.scrollType.type === 'arrows') {\n        _this.doubleTrigger = true;\n      }\n\n      if (typeof n === 'number') {\n        _this.cycleTo(n);\n      } else {\n        var activeIndex = _this.state.activeIndex;\n\n        _this.cycleTo(activeIndex + 1);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"slickPrev\", function (n) {\n      if (_this.scrollType.type === 'arrows') {\n        _this.doubleTrigger = true;\n      }\n\n      if (typeof n === 'number') {\n        _this.cycleTo(n);\n      } else {\n        var activeIndex = _this.state.activeIndex;\n\n        _this.cycleTo(activeIndex - 1);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"slickSet\", function (n, callback) {\n      return _this.cycleTo(n, callback);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"createVirtualList\", function () {\n      var _this$state7 = _this.state,\n          _this$state7$settings = _this$state7.settings,\n          slidesToShow = _this$state7$settings.slidesToShow,\n          overScan = _this$state7$settings.overScan,\n          activeIndex = _this$state7.activeIndex;\n\n      if (_this.virtualList.length > (slidesToShow + overScan) * 2 + 1) {\n        var result = [];\n        var getIndex = [];\n        var newActiveIndex = activeIndex;\n        var _this$scrollType2 = _this.scrollType,\n            type = _this$scrollType2.type,\n            direction = _this$scrollType2.direction;\n\n        switch (type) {\n          case 'scroll':\n            {\n              if (direction === 'left') newActiveIndex += 1;else newActiveIndex -= 1;\n              break;\n            }\n\n          case 'arrows':\n            {\n              if (direction === 'next') newActiveIndex += 1;else newActiveIndex -= 1;\n              break;\n            }\n\n          case 'dots':\n            {\n              if (direction === 'right') newActiveIndex += 1;else newActiveIndex -= 1;\n              break;\n            }\n\n          case 'wheel':\n            {\n              if (direction === 'next') newActiveIndex += 1;else newActiveIndex -= 1;\n              break;\n            }\n\n          case 'autoplay':\n            {\n              newActiveIndex += 1;\n              break;\n            }\n\n          default:\n            break;\n        }\n\n        var i = 0;\n\n        for (; i < slidesToShow + overScan; i += 1) {\n          if (i === 0) {\n            var index = _this.items.getIndex(newActiveIndex);\n\n            getIndex.push(index);\n          } else {\n            var rightIndex = _this.items.getIndex(newActiveIndex + i);\n\n            var leftIndex = _this.items.getIndex(newActiveIndex - i);\n\n            getIndex.push(rightIndex);\n            getIndex.unshift(leftIndex);\n          }\n        }\n\n        if (_this.endIndex >= 0 && typeof _this.endIndex === 'number') {\n          var buffer = 0;\n\n          if (activeIndex + _this.endIndex < _this.newChildren.length + _this.scrollDistance && activeIndex + _this.endIndex >= _this.newChildren.length - _this.scrollDistance && (activeIndex >= _this.newChildren.length - _this.scrollDistance || _this.endIndex >= _this.newChildren.length - _this.scrollDistance)) {\n            if (_this.endIndex + activeIndex < _this.newChildren.length) {\n              if (_this.endIndex < activeIndex) {\n                buffer = _this.newChildren.length - activeIndex + _this.endIndex;\n              } else {\n                buffer = _this.newChildren.length - _this.endIndex + activeIndex;\n              }\n            } else if (_this.endIndex < activeIndex) {\n              buffer = _this.newChildren.length + _this.scrollDistance - activeIndex + _this.endIndex;\n            } else {\n              buffer = _this.newChildren.length + _this.scrollDistance - _this.endIndex + activeIndex;\n            }\n          } else {\n            buffer = _this.endIndex < activeIndex ? activeIndex - _this.endIndex : _this.endIndex - activeIndex;\n          }\n\n          for (var j = 0; j < buffer; j += 1) {\n            var _rightIndex = _this.items.getIndex(newActiveIndex + i + j);\n\n            var _leftIndex = _this.items.getIndex(newActiveIndex - i - j);\n\n            switch (type) {\n              case 'arrows':\n                {\n                  if (direction === 'next') getIndex.push(_rightIndex);else getIndex.unshift(_leftIndex);\n                  break;\n                }\n\n              case 'dots':\n                {\n                  if (direction === 'right') getIndex.push(_rightIndex);else getIndex.unshift(_leftIndex);\n                  break;\n                }\n\n              case 'wheel':\n                {\n                  if (direction === 'next') getIndex.push(_rightIndex);else getIndex.unshift(_leftIndex);\n                  break;\n                }\n\n              case 'autoplay':\n                {\n                  getIndex.push(_rightIndex);\n                  break;\n                }\n\n              default:\n                break;\n            }\n          }\n        }\n\n        getIndex.sort(function (a, b) {\n          return a - b;\n        });\n\n        for (i = 0; i < getIndex.length; i += 1) {\n          var childrenIndex = getIndex[i];\n          var children = _this.newChildren[childrenIndex];\n          result.push(children);\n        }\n\n        return result;\n      }\n\n      return _this.virtualList;\n    });\n\n    _this.state = {\n      SliderRef: null,\n      width: 0,\n      height: 0,\n      autoplaying: null,\n      settings: _types.defaultProps,\n      activeIndex: 0\n    };\n    _this.touchObject = {};\n    _this.newChildren = [];\n    _this.virtualList = [];\n    _this.center = 0;\n    _this.offset = 0;\n    _this.target = 0;\n    _this.items = null;\n    _this.virtualItem = null;\n    _this.dim = 1;\n    _this.xform = '';\n    _this.resizeObserver = null;\n    _this.autoplayTimer = null;\n    ['', 'Webkit', 'Moz', 'O', 'ms'].every(function (prefix) {\n      var e = \"\".concat(prefix, \"Transform\");\n\n      if (typeof document !== 'undefined' && typeof document.body.style[e] !== 'undefined') {\n        _this.xform = e;\n        return false;\n      }\n\n      return true;\n    });\n    /* switch */\n\n    _this.doubleTrigger = false;\n    _this.initialSet = false;\n    _this.beforeChangeTrigger = false;\n    _this.scrollEnd = false;\n    _this.autoplayTimer = null;\n    _this.scrollType = {};\n    _this.scrollOptions = {};\n    _this.rerender = false;\n    _this.resizeHeight = false;\n    _this.endIndex = null;\n    _this.changeWindow = false;\n    /* functionBind */\n\n    _this.scroll = _this.scroll.bind(_assertThisInitialized(_this));\n    _this.setRef = _this.setRef.bind(_assertThisInitialized(_this));\n    _this.slideInit = _this.slideInit.bind(_assertThisInitialized(_this));\n    _this.slickNext = _this.slickNext.bind(_assertThisInitialized(_this));\n    _this.slickPrev = _this.slickPrev.bind(_assertThisInitialized(_this));\n    _this.slickSet = _this.slickSet.bind(_assertThisInitialized(_this));\n    _this.cycleTo = _this.cycleTo.bind(_assertThisInitialized(_this));\n    _this.autoPlay = _this.autoPlay.bind(_assertThisInitialized(_this));\n    _this.handleCarouselTap = _listener.handleCarouselTap.bind(_assertThisInitialized(_this));\n    _this.signupListener = _listener.signupListener.bind(_assertThisInitialized(_this));\n    _this.removeListener = _listener.removeListener.bind(_assertThisInitialized(_this));\n    _this.handleCarouselDrag = _listener.handleCarouselDrag.bind(_assertThisInitialized(_this));\n    _this.handleCarouselRelease = _listener.handleCarouselRelease.bind(_assertThisInitialized(_this));\n    _this.handleAutoplayPause = _listener.handleAutoplayPause.bind(_assertThisInitialized(_this));\n    _this.handleResize = (0, _throttle[\"default\"])(_listener.handleResize.bind(_assertThisInitialized(_this)), 1000, {\n      leading: true\n    });\n    _this.handleResizeHeight = (0, _throttle[\"default\"])(_listener.handleResizeHeight.bind(_assertThisInitialized(_this)), 500);\n    _this.handleVisibilityChange = _listener.handleVisibilityChange.bind(_assertThisInitialized(_this));\n    _this.handleKeyDown = _listener.handleKeyDown.bind(_assertThisInitialized(_this));\n    _this.handleClick = _listener.handleClick.bind(_assertThisInitialized(_this));\n    _this.handleWheel = _listener.handleWheel.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Slider, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.isMounted = true;\n      window.addEventListener('resize', this.handleResize);\n      this.init();\n      var onInit = this.props.onInit;\n      if (onInit && typeof onInit === 'function') onInit(this);\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      this.init();\n      var slidesPerRow = nextProps.slidesPerRow,\n          rows = nextProps.rows;\n      var _this$state$settings = this.state.settings,\n          originPerRow = _this$state$settings.slidesPerRow,\n          originRows = _this$state$settings.rows;\n\n      if (slidesPerRow !== originPerRow || rows !== originRows) {\n        this.resizeHeight = false;\n      }\n\n      return (0, _isEqual[\"default\"])(nextProps, this.props) || (0, _isEqual[\"default\"])(nextState, this.state);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var SliderRef = this.state.SliderRef;\n\n      var newProps = _objectSpread({}, this.props, {\n        children: []\n      });\n\n      var newPrevProps = _objectSpread({}, prevProps, {\n        children: []\n      });\n\n      var children = this.props.children;\n\n      if (!(0, _isEqual[\"default\"])(newProps, newPrevProps) || prevProps.children.length !== children.length) {\n        var onReInit = this.props.onReInit;\n        this.init();\n        this.setRef(SliderRef);\n        if (onReInit && typeof onReInit === 'function') onReInit(this);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.handleResize);\n      this.isMounted = false;\n    }\n    /**\n     * settings init\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state8 = this.state,\n          height = _this$state8.height,\n          settings = _this$state8.settings,\n          activeIndex = _this$state8.activeIndex;\n\n      var spec = _objectSpread({}, settings, {}, this.prop);\n\n      var centerPadding = settings.centerPadding,\n          centerMode = settings.centerMode;\n      var padding = typeof centerPadding === 'string' ? centerPadding : \"\".concat(centerPadding, \"px\");\n      /*  arrow  */\n\n      var arrowProps = extractObject(spec, ['arrows', 'arrowsScroll', 'centerMode', 'currentSlide', 'slideCount', 'slidesToShow', 'prevArrow', 'nextArrow', 'arrowsBlock']);\n      var prevArrow;\n      var nextArrow;\n\n      if (settings.arrows) {\n        prevArrow = _react[\"default\"].createElement(_arrows.PrevArrow, _extends({}, arrowProps, {\n          clickHandler: function clickHandler(options) {\n            _this2.beforeChangeTrigger = false;\n            _this2.scrollType = {\n              type: 'arrows',\n              direction: 'prev'\n            };\n            _this2.scrollOptions = options;\n\n            _this2.slickPrev(activeIndex - options.arrowsScroll);\n          }\n        }));\n        nextArrow = _react[\"default\"].createElement(_arrows.NextArrow, _extends({}, arrowProps, {\n          clickHandler: function clickHandler(options) {\n            _this2.beforeChangeTrigger = false;\n            _this2.scrollType = {\n              type: 'arrows',\n              direction: 'next'\n            };\n            _this2.scrollOptions = options;\n\n            _this2.slickNext(activeIndex + options.arrowsScroll);\n          }\n        }));\n      }\n      /*  Dots  */\n\n\n      var dots;\n\n      if (settings.dots === true && this.items) {\n        if (this.items.length >= settings.slidesToShow) {\n          var dotProps = extractObject(spec, ['dotsClass', 'slidesToShow', 'dotsScroll', 'clickHandler', 'children', 'customPaging', 'infinite', 'appendDots']);\n          var pauseOnDotsHover = settings.pauseOnDotsHover;\n          Object.assign(dotProps, {\n            activeIndex: activeIndex,\n            slideCount: this.items.length,\n            clickHandler: function clickHandler(options) {\n              _this2.beforeChangeTrigger = false;\n              var right = 0;\n              var left = 0;\n              var direction = null;\n\n              if (activeIndex > options.index) {\n                right = _this2.newChildren.length - activeIndex + options.index;\n                left = activeIndex - options.index;\n                direction = right < left ? 'right' : 'left';\n              } else {\n                right = options.index - activeIndex;\n                left = _this2.newChildren.length - options.index + activeIndex;\n                direction = right <= left ? 'right' : 'left';\n              }\n\n              _this2.scrollType = {\n                type: 'dots',\n                direction: direction\n              };\n              _this2.scrollOptions = options;\n\n              _this2.slickSet(options.index * options.dotsScroll);\n            },\n            onMouseEnter: pauseOnDotsHover ? this.onDotsLeave : null,\n            onMouseOver: pauseOnDotsHover ? this.onDotsOver : null,\n            onMouseLeave: pauseOnDotsHover ? this.onDotsLeave : null\n          });\n          dots = _react[\"default\"].createElement(_dots[\"default\"], dotProps);\n        }\n      }\n\n      var judge = this.items ? settings.slidesToShow < this.items.length : false;\n      /*  Slide  */\n\n      var component = _react[\"default\"].createElement(_react.Fragment, null, _react[\"default\"].createElement(\"div\", {\n        ref: function ref(e) {\n          var SliderRef = _this2.state.SliderRef;\n\n          if (!SliderRef && _this2.isMounted) {\n            _this2.setRef(e);\n          }\n        },\n        className: \"carousel-initialized\",\n        style: {\n          padding: centerMode ? \"0 \".concat(padding) : 0\n        }\n      }, !settings.unslick && judge ? prevArrow : '', _react[\"default\"].createElement(\"div\", {\n        style: {\n          height: \"\".concat(height, \"px\")\n        },\n        className: \"carousel-track\"\n      }, this.rerender ? this.newChildren : this.virtualList), !settings.unslick && judge ? nextArrow : ''), !settings.unslick && judge ? dots : '');\n\n      if (settings === 'unslick') {\n        var className = \"regular slider \".concat(settings.className || '');\n        component = _react[\"default\"].createElement(\"div\", {\n          className: className\n        }, this.newChildren);\n      }\n\n      return _react[\"default\"].createElement(\"div\", {\n        className: (0, _classnames[\"default\"])(settings.className)\n      }, component);\n    }\n  }]);\n\n  return Slider;\n}(_react.Component);\n\nSlider.propTypes = _types.propTypes;\nSlider.defaultProps = _types.defaultProps;\nvar _default = Slider;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}